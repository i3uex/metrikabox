import io
from typing import List
import numpy as np
from PIL import Image
import matplotlib.pyplot as plt

PYPLOT_PLOT_WIDTH = 1280
PYPLOT_PLOT_HEIGHT = 960
PYPLOT_PLOT_DPI = 100
PYPLOT_SIZE = 20
PYPLOT_FONT_FAMILY = "serif"
PYPLOT_LEGEND_FONT_SIZE = PYPLOT_SIZE
PYPLOT_LEGEND_FACE_COLOR = "white"
PYPLOT_FIGURE_SIZE = (20, 8)
PYPLOT_AXES_LABEL_SIZE = PYPLOT_SIZE
PYPLOT_AXES_TITLE_SIZE = PYPLOT_SIZE
PYPLOT_GRID_COLOR = "white"
PYPLOT_XTICK_LABEL_SIZE = PYPLOT_SIZE * 0.85
PYPLOT_YTICK_LABEL_SIZE = PYPLOT_SIZE * 0.85
PYPLOT_TICK_FONT_COLOR = "#535353"
PYPLOT_AXES_TITLE_PAD = 25
PYPLOT_AXES_EDGE_COLOR = "white"
PYPLOT_AXES_FACE_COLOR = "#e5e5e5"
PYPLOT_FIGURE_FACECOLOR = "white"


parameters = {
    "font.family": PYPLOT_FONT_FAMILY,
    "font.size": PYPLOT_LEGEND_FONT_SIZE,
    "legend.fontsize": PYPLOT_LEGEND_FONT_SIZE,
    "legend.facecolor": PYPLOT_LEGEND_FACE_COLOR,
    "figure.figsize": PYPLOT_FIGURE_SIZE,
    "axes.labelsize": PYPLOT_AXES_LABEL_SIZE,
    "axes.titlesize": PYPLOT_AXES_TITLE_SIZE,
    "grid.color": PYPLOT_GRID_COLOR,
    "xtick.labelsize": PYPLOT_XTICK_LABEL_SIZE,
    "ytick.labelsize": PYPLOT_YTICK_LABEL_SIZE,
    "axes.titlepad": PYPLOT_AXES_TITLE_PAD,
    "axes.edgecolor": PYPLOT_AXES_EDGE_COLOR,
    "axes.facecolor": PYPLOT_AXES_FACE_COLOR,
    "xtick.color": PYPLOT_TICK_FONT_COLOR,
    "ytick.color": PYPLOT_TICK_FONT_COLOR,
    "figure.facecolor": PYPLOT_FIGURE_FACECOLOR,
    "axes.formatter.use_locale": True
}
plt.rcParams.update(parameters)


def smooth_line(scalars: List[float], weight: float) -> List[float]:  # Weight between 0 and 1
    """
    Smooths a line using exponential smoothing
    :param scalars: List of values to smooth
    :param weight: Weight for the smoothing (0, 1)
    :return: List of smoothed values
    """
    last = scalars[0]  # First value in the plot (first timestep)
    smoothed = list()
    for point in scalars:
        smoothed_val = last * weight + (1 - weight) * point  # Calculate smoothed value
        smoothed.append(smoothed_val)                        # Save it
        last = smoothed_val                                  # Anchor the last smoothed value
    return smoothed


def draw_history(history, metric, best_metric_fn, percentage, smooth=.8, alpha=0.25):
    """
    Plots the history of the model training
    :param percentage: Whether if this metric should be shown as a percentage
    :param best_metric_fn: function to obtain the index of the best value for the metric
    :param history: History object from keras
    :param metric: Metric to plot
    :param smooth: Smoothing factor for the lines
    :param alpha: Opacity of the non-smoothed lines
    :return: Figure
    """
    val_metric = f'val_{metric}'
    fig = plt.figure()
    plt.grid(linewidth=1, which="major")
    plt.grid(linewidth=0.5, which="minor")
    ax = fig.gca()
    # Plot train data
    p = ax.plot(history[metric], alpha=alpha, label='_nolegend_')
    metric_color = p[0].get_color()
    ax.plot(smooth_line(history[metric], smooth), color=metric_color)
    # Plot validation data
    p = ax.plot(history[val_metric], alpha=alpha, label='_nolegend_')
    val_metric_color = p[0].get_color()
    ax.plot(smooth_line(history[val_metric], smooth), color=val_metric_color)
    ax.set_ylabel(metric.capitalize())
    ax.set_xlabel('Epoch')
    best_val_metric_epoch = best_metric_fn(history[val_metric])
    best_val_metric = history[val_metric][best_val_metric_epoch]
    ax.annotate(f'{round(best_val_metric * (100 if percentage else 1), 2)}{"%" if percentage else ""} at epoch {best_val_metric_epoch}',
                xy=(best_val_metric_epoch, best_val_metric),
                xycoords='data',
                xytext=(0.25, 0.25),
                textcoords='figure fraction',
                horizontalalignment='left',
                verticalalignment='bottom',
                arrowprops=dict(facecolor='black', shrink=0.0625, width=1, headwidth=7.5))
    ax.scatter(best_val_metric_epoch, best_val_metric, color=val_metric_color, marker='x', s=100)
    ax.legend(['Train', 'Validation'], loc='upper left')
    ratio = 3/4
    xleft, xright = ax.get_xlim()
    ybottom, ytop = ax.get_ylim()
    ax.set_aspect(abs((xright - xleft) / (ybottom - ytop)) * ratio)
    return fig


def buffer_plot_and_get(fig):
    buf = io.BytesIO()
    fig.savefig(buf, bbox_inches='tight', dpi=150)
    buf.seek(0)
    return Image.open(buf)


def get_image_from_history(history, metric, best_metric_fn=np.argmax, percentage=True):
    """
    :param history: History object from keras
    :param metric: Metric to plot
    :return: PIL image generated by plotting the selected metric of the history
    """
    return buffer_plot_and_get(draw_history(history, metric, best_metric_fn, percentage=percentage))


if __name__ == '__main__':
    history = {
        'loss': np.random.rand(10),
        'val_loss': np.random.rand(10),
        'accuracy': np.random.rand(10),
        'val_accuracy': np.random.rand(10)
    }
    get_image_from_history(history, 'accuracy').show()
    get_image_from_history(history, 'loss', best_metric_fn=np.argmin, percentage=False).show()