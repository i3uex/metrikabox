from typing import List
from PIL import Image
import matplotlib.pyplot as plt


def smooth_line(scalars: List[float], weight: float) -> List[float]:  # Weight between 0 and 1
    """
    Smooths a line using exponential smoothing
    :param scalars: List of values to smooth
    :param weight: Weight for the smoothing (0, 1)
    :return: List of smoothed values
    """
    last = scalars[0]  # First value in the plot (first timestep)
    smoothed = list()
    for point in scalars:
        smoothed_val = last * weight + (1 - weight) * point  # Calculate smoothed value
        smoothed.append(smoothed_val)                        # Save it
        last = smoothed_val                                  # Anchor the last smoothed value
    return smoothed


def draw_history(history, metric, smooth=.8, alpha=0.25):
    """
    Plots the history of the model training
    :param history: History object from keras
    :param metric: Metric to plot
    :param smooth: Smoothing factor for the lines
    :param alpha: Opacity of the non-smoothed lines
    :return: Figure
    """
    fig, ax = plt.subplots(1, 1)
    if metric == "accuracy":
        metric = 'binary_accuracy' if 'binary_accuracy' in history else 'categorical_accuracy'
    # Plot train data
    p = ax.plot(history[metric], alpha=alpha, label='_nolegend_')
    ax.plot(smooth_line(history[metric], smooth), color=p[0].get_color())
    # Plot validation data
    p = ax.plot(history[f'val_{metric}'], alpha=alpha, label='_nolegend_')
    ax.plot(smooth_line(history[f'val_{metric}'], smooth), color=p[0].get_color())
    ax.set_title(f'Model {metric.replace("_", " ").title()}')
    ax.set_ylabel(metric)
    ax.set_xlabel('epoch')
    ax.legend(['train', 'validation'], loc='upper left')
    return fig


def fig2pil(fig):
    """
    Converts a matplotlib figure to a PIL image
    :param fig: Figure to convert
    :return: PIL image
    """
    fig.canvas.draw()
    return Image.frombytes('RGBA', fig.canvas.get_width_height(), fig.canvas.buffer_rgba())


def get_image_from_history(history, metric):
    """
    :param history: History object from keras
    :param metric: Metric to plot
    :return: PIL image generated by plotting the selected metric of the history
    """
    return fig2pil(draw_history(history, metric))